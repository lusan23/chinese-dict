#include<stdio.h>
#include"sqlite/sqlite3.h"
#include<wchar.h>
#include<stdlib.h>

//get pinyin meaning and example
//tomorrow the pinyin and translatation plus create the data structure to store these data.



typedef  struct {
  wchar_t *hanzi;
  wchar_t *english;
  wchar_t *sentence;
} dict_cell;

static dict_cell hanzi_data;
static sqlite3 *db;
static int rc;


int checkDB(wchar_t* fileName){
  //open a connection to the data base.
  char *user_entry;

  rc = sqlite3_open16((const void *)fileName, &db);

  if (rc != SQLITE_OK) {
    wprintf(L"Cannot open database %s\n", sqlite3_errmsg(db));
    return 1;
  }
  return 0;
}
static int callback(void* data, int argc, char** argv, char** azColName) {
  //get the retrieved data from db and stores it dinamically in hanzi_data struct

  //space complexity O(n)
  hanzi_data.hanzi = malloc((wcslen((const wchar_t *)argv[0]) + 1) * sizeof(wchar_t));
  hanzi_data.sentence = malloc((wcslen((const wchar_t *)argv[1]) + 1) * sizeof(wchar_t));
  hanzi_data.english = malloc((wcslen((const wchar_t *)argv[2]) + 1) * sizeof(wchar_t));
  
  wcscpy(hanzi_data.hanzi, (const wchar_t *)argv[0]);
  wcscpy(hanzi_data.sentence, (const wchar_t *)argv[1]);
  wcscpy(hanzi_data.english, (const wchar_t *)argv[2]);

  return 0;
    
}

int prepQuery(wchar_t hanzi[10]) { 
  //prepare the query string to find the hanzi and check its syntax
  char *err_msg = 0;
  sqlite3_stmt *stmt;
  wchar_t   query[256];
  wchar_t  test[10];
  wchar_t y[10] = L"sd";
  //WORKING ON IT
  swprintf(query, 256, L"SELECT  pinyin, simplified, english FROM examples WHERE simplified LIKE \'%%%ls%\' AND LENGTH(simplified) <= 30  AND  english IS NOT NULL ORDER BY pinyin ASC LIMIT 1;", hanzi);
  //swprintf(test, 10, L"%ls", hanzi);
  wprintf(query);
    wchar_t *sql = query;
    
    wprintf(L"\nG:%s\n", query);

    rc = sqlite3_exec(db, (const char *)sql, callback, 0, &err_msg);

      if (rc != SQLITE_OK){
      wprintf(L"\nFailed to select data!\n");
      wprintf(L"SQL error: %hs\n", err_msg);
      sqlite3_free(err_msg);
      sqlite3_free(db);
      return 1;
    }
    
    else{
      printf("\nQuery sucessed!\n");
    }
    
    
  return 0;
}


int main(){
  //int rc;
  int checkDB(wchar_t* fileName);
  int prepQuery(wchar_t hanzi[2]);
  wchar_t user_input[10];

  wprintf(L"Please insert the chinese word:");
  wscanf(L"%9ls", user_input);
 

  wprintf(L"%s\n", user_input);
  if (checkDB(L"sen_data.db") == 0) {
    printf("Database successfully connected!!\n");
    prepQuery(user_input);
    wprintf(L"--------------------------------\n");
    wprintf(L"\n1:%ls\n2:%ls\n3:%ls\n", hanzi_data.hanzi, hanzi_data.sentence, hanzi_data.english);
 
    free(hanzi_data.hanzi);
    free(hanzi_data.sentence);
    free(hanzi_data.english);
};

    return 0;
}

